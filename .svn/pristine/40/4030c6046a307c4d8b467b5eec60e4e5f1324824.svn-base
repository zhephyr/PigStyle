Imports System.DirectoryServices
Imports System.Windows.Forms
Imports System.Data
Imports System.Data.SqlClient
Imports System.IO

Public Class frmStoreColorCopierCharges
    Inherits System.Web.UI.Page

    Public dirGroups As List(Of String)
    Public permissionType As String

    Dim connectionString As String = ("Server=VG-UNITEDDB;Database=freshdb;Uid=freshuser;Pwd=Fresh2012;")
    Dim conn As New SqlConnection(connectionString)
    Dim connmdb As ADODB.Connection
    Dim rsmdb As ADODB.Recordset ' dpinv(Microsoft Access)
    Dim connstr As ADODB.Connection ' venus
    Dim rsstr As ADODB.Recordset ' venus
    Dim fileCounter As Integer ' file counter

    Dim r As Integer
    Dim num_cols As Integer
    Dim col_wid() As Single
    Dim storeNum As String
    Dim copies As String
    Dim reams As Integer
    Dim simDup As String
    Dim jobType As String
    Dim laborHrs As Double
    Dim comments As String
    Dim selrow As Integer
    Dim selCol As Integer
    Dim segNum As Long
    Dim ControlCount As Integer
    Dim totalNetDue As String
    Dim tempTotal As Double
    Dim InvoiceNumber As Long
    Dim outf As Integer
    Dim conf As Integer
    Dim axfile As Integer
    Dim storecolor As Integer
    Dim pageCount As Integer
    Dim totalPage As Integer
    Dim FileHHFC As String
    Dim FileMMDDYY As String
    Dim PrintDate As String
    Dim optionChk As Integer
    Shared rowIndexes As List(Of Integer) = New List(Of Integer)

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        dirGroups = GetGroups("LDAP://pwmdc4/DC=sso,DC=fb,DC=com", HttpContext.Current.User.Identity.Name)

        ' Connection to freshdb
        conn = New SqlConnection(connectionString)
        conn.ConnectionString = "Server=VG-UNITEDDB;Database=freshdb;Uid=freshuser;Pwd=Fresh2012;"

        ' Connection to Microsoft Access database - dpinv
        connmdb = New ADODB.Connection
        connmdb.ConnectionString = ("Driver={Microsoft Access Driver (*.mdb, *.accdb)};Data Source=inventory;" & _
         "DATABASE=dpinv;uid=;pwd=;")

        ' Connection to acctprd
        connstr = New ADODB.Connection
        connstr.ConnectionString = "Provider=SQLNCLI11;Persist Security Info=False;User ID=sa;Password=2014Sql;Initial Catalog=microsoftdynamicsax2;Data Source=51.0.0.180,1433"

        ' This code stops ClearGrid() From running on postback.
        If Not (Page.IsPostBack) Then
            Call ClearGrid()
        End If
    End Sub

    Private Function GetGroups(ByVal _path As String, ByVal username As String) As List(Of String)
        Dim Groups As New List(Of String)
        Dim dirEntry As New System.DirectoryServices.DirectoryEntry(_path)
        Dim dirSearcher As New DirectorySearcher(dirEntry)
        dirSearcher.Filter = "(&(objectcategory=user)(SAMAccountName=" & username & "))"
        dirSearcher.PropertiesToLoad.Add("memberOf")
        Dim propCount As Integer
        Try
            Dim dirSearchResults As SearchResult = dirSearcher.FindOne()
            propCount = dirSearchResults.Properties("memberOf").Count
            Dim dn As String
            Dim equalsIndex As String
            Dim commaIndex As String
            For i As Integer = 0 To propCount - 1
                dn = dirSearchResults.Properties("memberOf")(i)
                equalsIndex = dn.IndexOf("=", 1)
                commaIndex = dn.IndexOf(",", 1)
                If equalsIndex = -1 Then
                    Return Nothing
                End If
                If Not Groups.Contains(dn.Substring((equalsIndex + 1), _
    (commaIndex - equalsIndex) - 1)) Then
                    Groups.Add(dn.Substring((equalsIndex + 1), (commaIndex - equalsIndex) - 1))
                End If
            Next
        Catch ex As Exception
            If ex.GetType Is GetType(System.NullReferenceException) Then
                MessageBox.Show("Selected user isn't a member of any groups at this time.", "No groups listed", MessageBoxButtons.OK, MessageBoxIcon.Error)
            Else
                MessageBox.Show(ex.Message.ToString, "Search Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
            End If
        End Try
        Return Groups
    End Function

    Protected Sub ClearGrid()

        ' This routine resets the GridView

        Dim dt As New DataTable
        Dim dr As DataRow = dt.NewRow()

        'Gridview Columns are created
        dt.Columns.Add(New DataColumn("Store Number", GetType(String)))
        dt.Columns.Add(New DataColumn("Copies", GetType(String)))
        dt.Columns.Add(New DataColumn("Sim/Dup", GetType(String)))
        dt.Columns.Add(New DataColumn("Job Type", GetType(String)))
        dt.Columns.Add(New DataColumn("Comments", GetType(String)))

        'Creates a empty row to display the header
        dr("Store Number") = String.Empty
        dr("Copies") = String.Empty
        dr("Sim/Dup") = String.Empty
        dr("Job Type") = String.Empty
        dr("Comments") = String.Empty
        dt.Rows.Add(dr)

        ' Binds gridview to the datasource and creates instance CurrentTable 
        ViewState("CurrentTable") = dt
        MSGridView.DataSource = dt

        'Updates GridView and hides the empty row.
        MSGridView.DataBind()
        MSGridView.Rows(0).Visible = False

    End Sub

    Protected Sub btnHidden2_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        Dim strsql As String

        connstr.Open()

        strsql = "select pw.custnocrossref from pwm_custcrossref pw"
        strsql = strsql & " join custtable ct"
        strsql = strsql & " on ct.accountnum = pw.custaccount"
        strsql = strsql & " where pw.custnocrossref ='" & txtStoreNum.Text & "'"
        strsql = strsql & " order by pw.custnocrossref"

        rsstr = connstr.Execute(strsql) ' run sql

        ' If TxtStoreNumber does not exist in strcustr(venus) database then tell
        ' user that store number is invalid
        If rsstr.EOF Then
            txtStoreNum.Text = ""
            txtStoreNum.Focus()
            Dim strNoStore As String
            strNoStore = "<script language=javascript> window.alert('Invalid store number');</script>"
            If (Not ClientScript.IsStartupScriptRegistered("clientScript")) Then
                ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strNoStore)
            End If
            rsstr.Close()
            connstr.Close()
            Exit Sub
        End If

        rsstr.Close()
        connstr.Close()

        ' If single entry or 1st time multiple entry, move cursor to TxtCode.
        ' ELSE if 2nd time or greater for multiple entry, existing data remains
        ' the same so load record into flexgrid.
        If rdSingle.Checked = True Then
            If Not String.IsNullOrEmpty(lstJobType.Text) Then
                Dim strtest As New StringBuilder()
                strtest.Append("<script language=javascript>")
                strtest.Append("validateComments();")
                strtest.Append("</script>")
                If (Not Page.ClientScript.IsStartupScriptRegistered("clientScript")) Then
                    Page.ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strtest.ToString())
                End If
            Else
                txtCopies.Focus() ' move cursor to TxtCopies (text box)
            End If
        ElseIf rdMultiple.Checked = True Then
            If optionChk = 1 Then
                If Not String.IsNullOrEmpty(lstJobType.SelectedIndex) Then
                    Dim strtest As New StringBuilder()
                    strtest.Append("<script language=javascript>")
                    strtest.Append("validateComments();")
                    strtest.Append("</script>")
                    If (Not Page.ClientScript.IsStartupScriptRegistered("clientScript")) Then
                        Page.ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strtest.ToString())
                    End If
                End If
            Else
                If Not String.IsNullOrEmpty(lstJobType.SelectedIndex) Then
                    Dim strtest As New StringBuilder()
                    strtest.Append("<script language=javascript>")
                    strtest.Append("validateComments();")
                    strtest.Append("</script>")
                    If (Not Page.ClientScript.IsStartupScriptRegistered("clientScript")) Then
                        Page.ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strtest.ToString())
                    End If
                Else
                    txtCopies.Focus() ' move cursor to TxtCopies (text box)
                End If
            End If
        Else
            txtCopies.Focus() ' move cursor to TxtCopies (text box)
        End If

    End Sub

    Protected Sub btnAdd_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        Call btnHidden2_Click(sender, e)

    End Sub

    Protected Sub btnLoadGrid_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        ' This button Is executed when the "add" button is clicked or the enter key is pressed in the comments textbox
        'The code below adds the information into the grid view table.

        Dim rowIndex As Integer = 0

        'Reads the current instance of the datatable
        If ViewState("CurrentTable") IsNot Nothing Then
            Dim dtCurrentTable As DataTable = DirectCast(ViewState("CurrentTable"), DataTable)
            Dim drCurrentRow As DataRow = dtCurrentTable.NewRow()

            'Adds the text to the datatable
            If dtCurrentTable.Rows.Count > 0 Then
                For i As Integer = 1 To dtCurrentTable.Rows.Count
                    drCurrentRow("Store Number") = txtStoreNum.Text
                    drCurrentRow("Copies") = txtCopies.Text
                    drCurrentRow("Sim/Dup") = lstSimDup.Text
                    drCurrentRow("Job Type") = lstJobType.Text
                    drCurrentRow("Comments") = txtComments.Text
                    rowIndex += 1
                Next
                'Accepts changes, updates CurrentTable and binds datasource. Keeps the empty row hidden.
                dtCurrentTable.Rows.Add(drCurrentRow)
                dtCurrentTable.AcceptChanges()
                ViewState("CurrentTable") = dtCurrentTable
                MSGridView.DataSource = dtCurrentTable
                MSGridView.DataBind()
                MSGridView.Rows(0).Visible = False
            End If

        End If
        If rdSingle.Checked = True Then
            txtStoreNum.Text = "" ' Clear txtStoreNum
            txtCopies.Text = "" ' Clear txtCopies
            lstSimDup.Text = "" ' Clear lstSimDup
            lstJobType.Text = "" ' Clear lstJobType
            txtComments.Text = "" ' Clear txtComments
            txtStoreNum.Focus() ' move cursor to txtStoreNum(text box)
        ElseIf rdMultiple.Checked = True Then
            txtStoreNum.Text = ""
            txtStoreNum.Focus()
            optionChk = 1
        End If

        'Sends over to the Previous Data Sub
        SetPreviousData()

        Exit Sub
    End Sub
    Private Sub SetPreviousData()

        'This sub displays the former information, so it is not overwritten by the new data
        Dim rowIndex As Integer = 0
        If ViewState("CurrentTable") IsNot Nothing Then
            Dim dt As DataTable = DirectCast(ViewState("CurrentTable"), DataTable)
            Dim dr As DataRow = dt.NewRow()
            If dt.Rows.Count > 0 Then
                For i As Integer = 0 To dt.Rows.Count - 1
                    dr("Store Number") = txtStoreNum.Text
                    dr("Copies") = txtCopies.Text
                    dr("Sim/Dup") = lstSimDup.Text
                    dr("Job Type") = lstJobType.Text
                    dr("Comments") = txtComments.Text
                Next
            End If
        End If

    End Sub

    Protected Sub btnProcess_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        Dim strsql As String
        Dim c As Integer
        Dim countThree As Long
        Dim rs As SqlDataReader

        fileCounter = 11

        Try
            ' Hour and minute - used for .imp & .ctl files
            ' FileHHMMSS = Format$(Now, "hhmmss")
            FileHHFC = Format$(Now, "hh") & Format(fileCounter, "00")
            ' Today's date in mmddyy format used for .imp, .ctl & .txt files
            FileMMDDYY = Format(Now, "MMddyy")
            ' Today's date in mm/dd/yyyy format used in Store Standard Copier Charges Report header
            PrintDate = Format(Now, "MM/dd/yyyy")

            'Do Until Not File.Exists("\\ssohome\home\ftp\Data_Processing\Imports\" & "pg" & FileMMDDYY & FileHHFC & ".imp")
            Do Until Not File.Exists("\\ssohome\home\ftp\Data_Processing\DPBillingTest\Imports\" & "pg" & FileMMDDYY & FileHHFC & ".imp")
                fileCounter = fileCounter + 1
                FileHHFC = Format$(Now, "hh") & Format(fileCounter, "00")
            Loop

        Catch ex As Exception

        End Try

        r = Convert.ToInt32(MSGridView.Rows.Count - 1)

        If r = 0 Then

            Dim strNoData As String
            strNoData = "<script language=javascript> window.alert('There is no data to process');</script>"
            If (Not ClientScript.IsStartupScriptRegistered("clientScript")) Then
                ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strNoData)
            End If
            Exit Sub
        End If

        conn.Open()

        segNum = 0
        ControlCount = 0
        totalNetDue = 0

        'File for Endura
        outf = FreeFile()
        'Dim accessfile1 = "\\ssohome\home\ftp\Data_Processing\Imports\" & "pg" & FileMMDDYY & FileHHFC & ".imp"
        Dim accessfile1 = "\\ssohome\home\ftp\Data_Processing\DPBillingTest\Imports\" & "pg" & FileMMDDYY & FileHHFC & ".imp"
        FileOpen(outf, accessfile1, OpenMode.Append)

        'Control file for Endura
        conf = FreeFile()
        'Dim accessfile2 = "\\ssohome\home\ftp\Data_Processing\Imports\" & "pg" & FileMMDDYY & FileHHFC & ".ctl"
        Dim accessfile2 = "\\ssohome\home\ftp\Data_Processing\DPBillingTest\Imports\" & "pg" & FileMMDDYY & FileHHFC & ".ctl"
        FileOpen(conf, accessfile2, OpenMode.Append)

        storecolor = FreeFile()
        'Dim accessfile3 = "\\ssohome\home\ftp\Data_Processing\Reports\storecolor" & FileMMDDYY & ".txt"
        Dim accessfile3 = "\\ssohome\home\ftp\Data_Processing\DPBillingTest\Reports\storecolor" & FileMMDDYY & ".txt"
        FileOpen(storecolor, accessfile3, OpenMode.Append)

        '****************** AX FILE **************************
        axfile = FreeFile()
        Dim accessfile4 = "\\ssohome\home\ftp\AXImports\ARImports\" & "AXpg" & FileMMDDYY & FileHHFC & ".imp"
        FileOpen(axfile, accessfile4, OpenMode.Append)
        '*****************************************************

        strsql = "select invoice_num from dp_store_inv "
        Dim command As New SqlCommand(strsql, conn)
        rs = command.ExecuteReader() ' run sql

        rs.Read()
        InvoiceNumber = rs.Item("invoice_num")

        For c = 1 To r

            storeNum = MSGridView.Rows(c).Cells(1).Text
            copies = MSGridView.Rows(c).Cells(2).Text
            simDup = MSGridView.Rows(c).Cells(3).Text
            jobType = MSGridView.Rows(c).Cells(4).Text
            comments = MSGridView.Rows(c).Cells(5).Text

            InvoiceNumber = InvoiceNumber + 1

            rs.Close() 'Closes connection
            Call calc()

        Next

        'totalNetDue = LSet(tempTotal, 9)
        totalNetDue = tempTotal.ToString("0000000000.00")

        countThree = ControlCount * 3
        ' Write control file
        PrintLine(conf, "source_id=" & Chr(34) & "PRINTING   " & Chr(34))
        PrintLine(conf, "format_version=1")
        PrintLine(conf, "line_count=" & Format(countThree, "000000"))
        PrintLine(conf, "total_amounts=" & LSet(totalNetDue, 14))
        PrintLine(conf, "source_date=" & Chr(34) & Format(Now, "MM/dd/yyyy") & Chr(34))

        FileClose(outf)
        FileClose(conf)
        FileClose(storecolor)
        FileClose(axfile)

        'Calls CreateCheckFile sub
        Call CreateCheckFile()

        'Call ftpSendFile("\\ssohome\home\ftp\Data_Processing\Imports\")
        Call ftpSendFile("\\ssohome\home\ftp\Data_Processing\DPBillingTest\Imports\")

        Call ClearGrid()

        tempTotal = 0
        totalNetDue = ""
        storeNum = 0
        copies = 0
        simDup = ""
        jobType = ""
        comments = ""

        r = 0
        c = 0

        segNum = 0

        Dim strComplete As String
        strComplete = "<script language=javascript> window.alert('Process Completed');</script>"
        If (Not ClientScript.IsStartupScriptRegistered("clientScript")) Then
            ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strComplete)
        End If

        Exit Sub

    End Sub

    Private Sub calc()

        Dim strsql As String
        Dim Sided As Integer
        Dim Total_Copies As Integer
        Dim Total_Cost As Double
        Dim tempNum As String
        Dim tempCost As String
        Dim tempTotalCost As String
        Dim tempComment As String
        Dim endNum As String
        Dim rs As Object

        tempNum = ""
        endNum = ""

        ' Cost of each copy is .15
        tempCost = 0.15

        ' Simplex is 1 copy
        ' Duplex is 2 copies
        If Mid(simDup, 5, 7) = "Simplex" Then
            Sided = 1
        End If
        If Mid(simDup, 5, 6) = "Duplex" Then
            Sided = 2
        End If

        ' Example: Multiply sided (2) by Txtcopies (20) to get Total_Copies (40)
        Total_Copies = copies * Sided
        ' Example: Multiply .15 by Total_Copies (40) to get a rounded Total_cost (6.00)
        Total_Cost = Math.Round(Total_Copies * 0.15, 2)
        tempTotalCost = LSet(Total_Cost, 6) & ".00"
        ' Round Total_Cost to 2 places to the right of the decimal (6.00) --> (6.00)
        ' RoundTot = Round(Total_Cost, 2)

        tempComment = UCase(comments)
        If tempComment = "&NBSP;" Then
            tempComment = ""
        End If

        strsql = "insert into dp_store_color "
        strsql = strsql & " values ("
        strsql = strsql & "'" & Format(Today, "yyyy-MM-dd") & "',"
        strsql = strsql & "'" & InvoiceNumber & "',"
        strsql = strsql & "'" & storeNum & "',"
        strsql = strsql & "'" & copies & "',"
        strsql = strsql & "'" & Mid(simDup, 1, 7) & "',"
        strsql = strsql & "'" & Mid(jobType, 1, 7) & "',"
        strsql = strsql & "'" & Mid(tempComment, 1, 30) & "',"
        strsql = strsql & "'" & Total_Cost & "')"
        Dim command As New SqlCommand(strsql, conn)
        rs = command.ExecuteReader() 'runs sql

        PrintLine(storecolor, SPC(6), Format(InvoiceNumber, "00000000"), SPC(9), LSet(storeNum, 3), SPC(14), LSet(copies, 5), SPC(11), LSet(tempCost, 7), SPC(11), LSet(simDup, 8), SPC(10), LSet(jobType, 7), SPC(6), LSet(tempTotalCost, 8), SPC(7), LSet(tempComment, 30))   ' print record to file

        If jobType = "Coupons" Then
            endNum = "6080-030"
        ElseIf jobType = "Flyers" Then
            endNum = "6080-035"
        Else
            endNum = "6020-020"
        End If

        segNum = segNum + 1

        'From couponreports2.vbp
        Print(outf, Format(segNum, "0000") & "|")
        Print(outf, "H" & "|")
        Print(outf, "PRINTING  " & "|")
        Print(outf, LSet(storeNum, 3) & "||")
        Print(outf, "INV" & "||")
        Print(outf, Format(Today, "MM/dd/yyyy") & "|||||||||||||||")
        Print(outf, "SSS-SVC" & "|")
        Print(outf, "SSS-SVC" & "|")
        Print(outf, "SSS-SVC" & "|")
        tempNum = Format(Total_Cost, "0.00")
        Print(outf, RSet(tempNum, 7) & "|||")
        Print(outf, tempComment & "||||||||||||||||||||||||||||||||||")
        Print(outf, Format(Today, "MM/dd/yyyy") & "|")
        PrintLine(outf, "PC" & LSet(InvoiceNumber, 8) & "||||||      ")

        ' write the "D" data for print job
        Print(outf, Format(segNum, "0000") & "|")
        Print(outf, "D" & "||||||||||||||||||||||||||||||")
        Print(outf, "1" & "|")
        Print(outf, "M" & "|")
        tempNum = Format(Total_Cost, "0.00")
        Print(outf, RSet(tempNum, 7) & "||" & Total_Copies & "|" & ".15" & "||")
        'Print #outf, Format(tempNum, "@@@@@@@") & "|||||";
        Print(outf, "COLOR COPY CHARGE" & "|||")
        Print(outf, RSet(tempNum, 7) & "||")
        PrintLine(outf, "0.00" & "||||||||||||||||||||||||||      ")

        ' write the third "A" data for print job
        Print(outf, Format(segNum, "0000") & "|")
        Print(outf, "A" & "||||||||||||||||||||||||||||||")
        Print(outf, "1" & "|||||||||||||||||||||||||||")
        Print(outf, "SSS-SVC-630-070-6020-090" & "|")
        tempNum = Format(Total_Cost, "0.00")
        Print(outf, RSet(tempNum, 7) & "|")
        Print(outf, "1" & "||||")
        'Print #outf, "XXX-" & Format(storeNum, "000") & "-000-000-6080-030" & "||||| "
        PrintLine(outf, "XXX-" & LSet(storeNum, 3) & "-000-000-" & endNum & "||||| ")


        '******************* AX File Create *********************************************
        If jobType = "Coupons" Then
            endNum = "608050"
        ElseIf jobType = "Flyers" Then
            endNum = "608070"
        Else
            endNum = "602040"
        End If



        'From couponreports2.vbp
        Print(axfile, Format(segNum, "0000") & "|")
        Print(axfile, "H" & "|")
        Print(axfile, "PRINTING  " & "|")
        Print(axfile, LSet(storeNum, 3) & "||")
        Print(axfile, "INV" & "||")
        Print(axfile, Format(Today, "MM/dd/yyyy") & "|||||||||||||||")
        Print(axfile, "SVC" & "|")
        Print(axfile, "PWM" & "|")

        '****Get from store cross ref to retrieve stores entity*****************
        Print(axfile, LSet(storeNum, 3) & "|")

        tempNum = Format(Total_Cost, "0.00")
        Print(axfile, RSet(tempNum, 7) & "|||")
        Print(axfile, tempComment & "||||||||||||||||||||||||||||||||||")
        Print(axfile, Format(Today, "MM/dd/yyyy") & "|")
        PrintLine(axfile, "PC" & LSet(InvoiceNumber, 8) & "||||||      ")

        ' write the "D" data for print job
        Print(axfile, Format(segNum, "0000") & "|")
        Print(axfile, "D" & "||||||||||||||||||||||||||||||")
        Print(axfile, "1" & "|")
        Print(axfile, "I" & "|") 'Changed from M to I per keith for AX 10/27/2014
        tempNum = Format(Total_Cost, "0.00")
        Print(axfile, RSet(tempNum, 7) & "||" & Total_Copies & "|" & ".15" & "||")
        'Print #outf, Format(tempNum, "@@@@@@@") & "|||||";
        Print(axfile, "COLOR COPY CHARGE" & "|||")
        'Print(axfile, RSet(tempNum, 7) & "||")
        Print(axfile, "||")
        PrintLine(axfile, "0.00" & "||||||||||||||||||||||||||      ")

        ' write the third "A" data for print job
        Print(axfile, Format(segNum, "0000") & "|")
        Print(axfile, "A" & "||||||||||||||||||||||||||||||")
        Print(axfile, "1" & "||||||||||||||||||||||||||||")
        'Print(axfile, "SSS-SVC-630-070-6020-090" & "|")
        Print(axfile, "602150" & "|")
        Print(axfile, "SVC" & "|")
        Print(axfile, "633" & "|||||")

        tempNum = Format(Total_Cost, "0.00")
        Print(axfile, RSet(tempNum, 7) & "|")
        Print(axfile, "1" & "||")
        'PrintLine(axfile, "XXX-" & LSet(storeNum, 3) & "-000-000-" & endNum & "||||| ")
        Print(axfile, endNum & "|")
        Print(axfile, LSet(storeNum, 3) & "|")
        PrintLine(axfile, "000" & "|||||")

        '************************** AX File End ****************************************

        rs.close()

        ' Update invoice number in dp_store_inv
        strsql = "update dp_store_inv set invoice_num ='" & InvoiceNumber & "'"
        Dim command2 As New SqlCommand(strsql, conn)
        rs = command2.ExecuteReader() 'runs Sql
        rs.close() 'Closes connection

        ' ControlCount is used in the Control file.
        ' Each H,D,A counts as 1 record.
        ' All records in an import file are added up and used in the control file.
        ControlCount = ControlCount + 1

        ' totalNetDue is used in the control file.
        ' All record totals are added together to get a grand total for the control file.
        tempTotal = tempTotal + Total_Cost
        ' totalNetDue = Format(tempTotal, "######.00")

    End Sub

    Private Sub CreateCheckFile()

        Dim CheckFile = FreeFile()
        Dim accessFile = "\\ssohome\home\ftp\Data_Processing\DPBillingTest\CheckFile\storecolorCheck.txt"   ' For Testing 
        FileOpen(CheckFile, accessFile, OpenMode.Append)
        FileClose()

    End Sub

    Private Sub ftpSendFile(ByVal mydir As String)

        Dim bat As Integer
        Dim dat As Integer

        Dim n As String
        Dim found As String
        Dim mystring As String
        Dim myApp As String

        On Error GoTo errfile

        ' create ftpfeed.bat file
        bat = FreeFile()
        'Dim openbat = "\\ssohome\home\ftp\vb_coupon\programs\dpbillftp.bat"
        Dim Openbat = "\\ssohome\home\ftp\Data_Processing\DPBillingTest\ftp\dpbillftp.bat"
        FileOpen(bat, openbat, OpenMode.Output)
        'PrintLine(bat, "ftp -s:\\ssohome\home\ftp\vb_coupon\programs\dpbillftp.dat >\\ssohome\home\ftp\vb_coupon\programs\dpbillftp.log")
        PrintLine(bat, "ftp -s:\\ssohome\home\ftp\Data_Processing\DPBillingTest\ftp\dpbillftp.dat >\\ssohome\home\ftp\Data_Processing\DPBillingTest\ftp\dpbillftp.log")

        ' create ftpfeed.dat file
        dat = FreeFile()
        'Dim opendat = "\\ssohome\home\ftp\vb_coupon\programs\dpbillftp.dat"
        Dim Opendat = "\\ssohome\home\ftp\Data_Processing\DPBillingTest\ftp\dpbillftp.dat"
        FileOpen(dat, opendat, OpenMode.Output)

        ' open 2200 address 51.0.0.248, username: ftpxfer, pw: ftpass
        PrintLine(dat, "o acctprd")    'Disabled for testing
        'PrintLine(dat, "o mars")        'For testing
        PrintLine(dat, "ftpxfer")
        PrintLine(dat, "ftpass")

        ' change to correct directory
        PrintLine(dat, "cd /usr/fourgen/accounting/import/print_imp/")

        ' put files
        PrintLine(dat, "put " & mydir & "pg" & FileMMDDYY & FileHHFC & ".imp")     ' data file
        PrintLine(dat, "put " & mydir & "pg" & FileMMDDYY & FileHHFC & ".ctl")

        ' change permissions on files so that they are read/write
        PrintLine(dat, "quote site chmod 666 pg" & FileMMDDYY & FileHHFC & ".imp")
        PrintLine(dat, "quote site chmod 666 pg" & FileMMDDYY & FileHHFC & ".ctl")

        ' log off
        PrintLine(dat, "bye")
        FileClose(bat)
        FileClose(dat)

        ' run ftpfeed.bat which runs the FTP through MSDOS prompt
        'n = Shell("\\ssohome\home\ftp\vb_coupon\programs\dpbillftp.bat", vbMaximizedFocus)
        'n = Shell("\\ssohome\home\ftp\Data_Processing\DPBillingTest\ftp\dpbillftp.bat", vbMaximizedFocus)
        System.Diagnostics.Process.Start("\\ssohome\home\ftp\Data_Processing\DPBillingTest\ftp\dpbillftp.bat")

        Exit Sub

errfile:

        Dim strBatman As String
        strBatman = "<script language=javascript> window.alert('Error creating the bat file');</script>"
        If (Not ClientScript.IsStartupScriptRegistered("clientScript")) Then
            ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strBatman)
        End If
        Exit Sub

    End Sub

    Protected Sub btnDelete_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        ' Any row can be deleted except 0 which is associated with the header.
        ' This code allows the user to delete the selected row. However row 0 must remain.

        Dim dtCurrentTable As DataTable = DirectCast(ViewState("CurrentTable"), DataTable)

        'If MSGridView.SelectedIndex > 0 Then
        '    dtCurrentTable.Rows(MSGridView.SelectedIndex).Delete()
        '    MSGridView.SelectedIndex = 0
        'Else
        '    'Displays messagebox if user attempts to delete invalid row
        '    Dim strRowDelete As String
        '    strRowDelete = "<script language=javascript> window.alert('Invalid row selection');</script>"
        '    If (Not ClientScript.IsStartupScriptRegistered("clientScript")) Then
        '        ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strRowDelete)
        '    End If
        '    Exit Sub

        'End If

        If rowIndexes.Count < 1 Then
            Dim strRowDelete As String = "<script language=javascript> window.alert('Invalid row selection');</script>"
            If (Not ClientScript.IsStartupScriptRegistered("clientScript")) Then
                ClientScript.RegisterStartupScript(Page.GetType(), "clientScript", strRowDelete)
            End If
            Exit Sub
        Else
            For Each index In rowIndexes
                dtCurrentTable.Rows(index).Delete()
            Next
        End If

        'Accepts gridview changes, updates datatable, binds gridview, and keeps row 0 invisible.
        rowIndexes.Clear()
        dtCurrentTable.AcceptChanges()
        ViewState("CurrentTable") = dtCurrentTable
        MSGridView.DataSource = dtCurrentTable
        MSGridView.DataBind()
        MSGridView.Rows(0).Visible = False

    End Sub

    Protected Sub selectChk_CheckedChanged(sender As Object, e As EventArgs)
        Dim row As GridViewRow = CType(CType(sender, System.Web.UI.Control).Parent.Parent, GridViewRow)
        If (CType(row.FindControl("selectChk"), System.Web.UI.WebControls.CheckBox)).Checked Then
            row.BackColor = Drawing.Color.LightGray
            rowIndexes.Add(row.RowIndex)
        ElseIf Not (CType(row.FindControl("selectChk"), System.Web.UI.WebControls.CheckBox)).Checked Then
            rowIndexes.Remove(row.RowIndex)
            row.BackColor = Nothing
        End If
    End Sub

    Protected Sub btnExit_Click(ByVal sender As Object, ByVal e As System.EventArgs)

        ' Clear all text boxes
        txtStoreNum.Text = "" ' Clear TxtRequestor
        txtCopies.Text = "" ' Clear lstDepartment
        lstSimDup.Text = "" ' Clear lstSimDup
        lstJobType.Text = "" ' Clear lstJobType
        txtComments.Text = "" ' Clear TxtComments

        Call ClearGrid() 'Clears GridView Table

        'Moves window to Store Billing

        Response.Redirect("../frmDataProcessing.aspx", True)

    End Sub

End Class